const fs = require('fs');
const path = require('path');

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ node-fetch v2 –∏ v3
const fetchImport = require('node-fetch');
const fetch = fetchImport.default || fetchImport;

async function getPcodes(url) {
  const res = await fetch(url, { redirect: 'follow' });
  const finalUrl = res.url;
  const u = new URL(finalUrl);
  const pcodesParam = u.searchParams.get('pcodes');
  if (!pcodesParam) {
    throw new Error(`–í URL ${url} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä pcodes`);
  }
  const segments = pcodesParam.split('_');
  const items = {};
  segments.forEach(seg => {
    const m = seg.match(/^(.+?)qty(\d+)$/);
    if (m) {
      const code = m[1];
      const qty  = parseInt(m[2], 10);
      items[code] = (items[code] || 0) + qty;
    } else {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç: ${seg}`);
    }
  });
  return { items, count: segments.length };
}

async function main() {
  // –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –∫–æ—Ä–∑–∏–Ω–∞–º–∏
  const cartsPath = path.join(__dirname, 'verifyCartSplit', 'carts.json');
  if (!fs.existsSync(cartsPath)) {
    console.error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cartsPath}`);
    process.exit(1);
  }

  const raw = fs.readFileSync(cartsPath, 'utf8');
  let config;
  try {
    config = JSON.parse(raw);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ ${cartsPath}: ${err.message}`);
    process.exit(1);
  }

  const mainUrl = config.mainCart;
  const parts  = config.dropCarts || [];
  if (!mainUrl || !parts.length) {
    console.error('–í –∫–æ–Ω—Ñ–∏–≥–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å mainCart –∏ –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ dropCarts');
    process.exit(1);
  }

  console.log('‚Üí –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞:', mainUrl);
  const { items: mainItems, count: mainCount } = await getPcodes(mainUrl);
  console.log(`  —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${Object.keys(mainItems).length}, –ø–æ–∑–∏—Ü–∏–π: ${mainCount}\n`);

  const partItemsList = [];
  let totalPartCount = 0;
  for (let i = 0; i < parts.length; i++) {
    const url = parts[i];
    console.log(`‚Üí –ß–∞—Å—Ç–∏—á–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ ${i+1}:`, url);
    const { items, count } = await getPcodes(url);
    console.log(`  —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${Object.keys(items).length}, –ø–æ–∑–∏—Ü–∏–π: ${count}\n`);
    partItemsList.push(items);
    totalPartCount += count;
  }
  console.log(`–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö: ${totalPartCount}\n`);

  // –°–ª–∏—è–Ω–∏–µ
  const merged = {};
  partItemsList.forEach(items => {
    for (const [code, qty] of Object.entries(items)) {
      merged[code] = (merged[code] || 0) + qty;
    }
  });

  let ok = true;
  const mainCodes = Object.keys(mainItems);
  const partCodes = Object.keys(merged);

  // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
  const missing = mainCodes.filter(c => !partCodes.includes(c));
  if (missing.length) {
    ok = false;
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:');
    missing.forEach(c => {
      console.error(`   ‚Ä¢ ${c}: –æ–∂–∏–¥–∞–ª–æ—Å—å ${mainItems[c]}, –Ω–∞–π–¥–µ–Ω–æ 0`);
    });
    console.error('');
  }

  // –õ–∏—à–Ω–∏–µ
  const extra = partCodes.filter(c => !mainCodes.includes(c));
  if (extra.length) {
    ok = false;
    console.error('‚ùå –õ–∏—à–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö:');
    extra.forEach(c => {
      console.error(`   ‚Ä¢ ${c}: –Ω–∞–π–¥–µ–Ω–æ ${merged[c]}`);
    });
    console.error('');
  }

  // –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ qty
  const mismatches = mainCodes.filter(c => merged[c] !== mainItems[c]);
  if (mismatches.length) {
    ok = false;
    console.error('‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:');
    mismatches.forEach(c => {
      const exp = mainItems[c], act = merged[c]||0;
      console.error(`   ‚Ä¢ ${c}: –æ–∂–∏–¥–∞–ª–æ—Å—å ${exp}, –Ω–∞–π–¥–µ–Ω–æ ${act}`);
    });
    console.error('');
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
  if (mainCount !== totalPartCount) {
    ok = false;
    console.error(`‚ùå –†–∞–∑–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–π: –æ—Å–Ω–æ–≤–Ω–∞—è=${mainCount}, —á–∞—Å—Ç–∏—á–Ω—ã–µ=${totalPartCount}\n`);
  }

  if (ok) {
    console.log('‚úÖ –†–∞–∑–±–∏–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç.');
    process.exit(0);
  } else {
    console.error('üö® –†–∞–∑–±–∏–µ–Ω–∏–µ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ.');
    process.exit(2);
  }
}

main().catch(err => {
  console.error('–û—à–∏–±–∫–∞:', err.message);
  process.exit(3);
});
