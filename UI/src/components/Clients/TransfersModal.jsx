// üìÅ UI/src/components/Clients/TransfersModal.jsx

import React, { useState } from 'react';
import { Modal, Button, Table, Form } from 'react-bootstrap';

export default function TransfersModal({ client, onClose, onSave }) {
  // –õ–æ–∫–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞
  const [draft, setDraft] = useState(() => {
    const copy = JSON.parse(JSON.stringify(client));
    if (!copy.safekeepingMoney) copy.safekeepingMoney = { totalCollected: 0, transfers: [] };
    if (!Array.isArray(copy.safekeepingMoney.transfers))
      copy.safekeepingMoney.transfers = [];
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è totalCollected, –µ—Å–ª–∏ –Ω–µ—Ç
    copy.safekeepingMoney.totalCollected = copy.safekeepingMoney.transfers.reduce(
      (sum, t) => sum + Number(t.amount || 0),
      0
    );
    return copy;
  });

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ blur
  const fmtDate = (s) => {
    const digits = s.replace(/\D/g, '');
    if (digits.length >= 12) {
      const d = digits.slice(0, 8);
      const t = digits.slice(8, 12);
      return `${d.slice(0,2)}-${d.slice(2,4)}-${d.slice(4,8)} ${t.slice(0,2)}:${t.slice(2,4)}`;
    } else if (digits.length >= 8) {
      const d = digits.slice(0, 8);
      return `${d.slice(0,2)}-${d.slice(2,4)}-${d.slice(4,8)}`;
    }
    return s;
  };

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  const addTransfer = () => {
    const newTransfer = { sender: '', amount: '', date: '' };
    const transfers = [...draft.safekeepingMoney.transfers, newTransfer];
    const total = transfers.reduce((sum, t) => sum + Number(t.amount || 0), 0);
    setDraft({
      ...draft,
      safekeepingMoney: { ...draft.safekeepingMoney, transfers, totalCollected: total },
    });
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
  const updateTransfer = (idx, field, value) => {
    const transfers = [...draft.safekeepingMoney.transfers];
    transfers[idx] = { ...transfers[idx], [field]: value };
    const total = transfers.reduce((sum, t) => sum + Number(t.amount || 0), 0);
    setDraft({
      ...draft,
      safekeepingMoney: { ...draft.safekeepingMoney, transfers, totalCollected: total },
    });
  };

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
  const deleteTransfer = (idx) => {
    const transfers = draft.safekeepingMoney.transfers.filter((_, i) => i !== idx);
    const total = transfers.reduce((sum, t) => sum + Number(t.amount || 0), 0);
    setDraft({
      ...draft,
      safekeepingMoney: { ...draft.safekeepingMoney, transfers, totalCollected: total },
    });
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const handleSave = () => {
    const copy = JSON.parse(JSON.stringify(draft));
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ totalCollected –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    copy.safekeepingMoney.totalCollected = copy.safekeepingMoney.transfers.reduce(
      (sum, t) => sum + Number(t.amount || 0),
      0
    );
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã
    copy.safekeepingMoney.transfers = copy.safekeepingMoney.transfers.map((t) => ({
      ...t,
      date: fmtDate(t.date),
      amount: Number(t.amount) || 0,
    }));
    onSave(copy);
    onClose();
  };

  return (
    <Modal show onHide={onClose} centered size="lg">
      <Modal.Header closeButton>
        <Modal.Title>–ü–µ—Ä–µ–≤–æ–¥—ã –∞–≥–µ–Ω—Ç—É¬†{client.name}</Modal.Title>
      </Modal.Header>

      <Modal.Body>
        <div className="mb-3">
          <strong>–°—É–º–º–∞ —É –∞–≥–µ–Ω—Ç–∞: {draft.safekeepingMoney.totalCollected}</strong>
        </div>
        <Button size="sm" className="mb-2" onClick={addTransfer}>
          + –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
        </Button>
        <Table bordered size="sm">
          <thead>
            <tr>
              <th>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</th>
              <th>–°—É–º–º–∞</th>
              <th>–î–∞—Ç–∞</th>
              <th style={{ width: '5%' }} />
            </tr>
          </thead>
          <tbody>
            {draft.safekeepingMoney.transfers.length === 0 && (
              <tr>
                <td colSpan={4} className="text-center">
                  –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ—Ç
                </td>
              </tr>
            )}
            {draft.safekeepingMoney.transfers.map((t, i) => (
              <tr key={i}>
                <td>
                  <Form.Control
                    size="sm"
                    name="sender"
                    value={t.sender}
                    onChange={(e) => updateTransfer(i, 'sender', e.target.value)}
                  />
                </td>
                <td>
                  <Form.Control
                    size="sm"
                    name="amount"
                    type="number"
                    value={t.amount}
                    onChange={(e) => updateTransfer(i, 'amount', e.target.value)}
                  />
                </td>
                <td>
                  <Form.Control
                    size="sm"
                    name="date"
                    placeholder="DD-MM-YYYY HH:MM"
                    value={t.date}
                    onChange={(e) => updateTransfer(i, 'date', e.target.value)}
                    onBlur={(e) => updateTransfer(i, 'date', fmtDate(e.target.value))}
                  />
                </td>
                <td>
                  <Button size="sm" variant="danger" onClick={() => deleteTransfer(i)}>
                    √ó
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Modal.Body>

      <Modal.Footer>
        <Button variant="secondary" onClick={onClose}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button variant="success" onClick={handleSave}>
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </Modal.Footer>
    </Modal>
  );
}
